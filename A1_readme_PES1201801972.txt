#S NIKHIL RAM 
#PES1201801972
# Note: I have used the term 'generated' which means that the snippet of code is streamed to the output.

Structures
    Tree: 
    This structure refers to the GPT.
    It has a pointer whih points to the root node of the tree.

    Node: 
    This structure represent the individual nodes of the tree.
    The GPT is stores in the form of a Binary Tree hence a Node points to its sibling as well as its first child.
    Hence there are 2 Node* pointers, one which points to the sibling and the other which points to its child.
    There is another pointer of Object type which is the container structure which can be changed accordingly to store any value in the GPT.

    Object:
    The Object strucure consists of a Character pointer which stores the string which needs to be printed at that corresponding level.
    A Long Int called func_number has been used. The function calls have been numbered from 1 to N (N=number of nodes excluding root node).
    The functions which are generated are of the format "function_(func_number)".
    The reason for this format to be used is to solve the following problems:
        -When there are are more than 1 location in the menu which consists of the same string which shall result is 2 identical function names.
        -Even if the case number and depth is incorporated into the function name, there could be some cases when case number and depth number remains identical.
        -Also if there exists a special character or a space in the test to be printed, this cannot be incorporated into the function name.
    This number is hence preserved also in the node so that the function call which must be made can be determined

Logic

    Initially the headers of the 'Menu Program' are generated.
    Then the GPT is generated by reading the input recursively from standard input.
    As the GPT is being made, the functions to print the given text at each level is also generated with the following function name: "function_(func_number)"
    The structure "Object" is used to store the string as well as the func_number. The reason for this is explained under structures category in the readme file in detail. 
    Once the functions are generated, the 'main' function which consists of the 'Menu' is generated.
    The Tree is traversed recursively and the switch cases along with the While loop is generated for each respective level accordingly.
    The generated code is indented precisely.
    'Prolog' and 'Epilog' functions are used to generate the snippets of switch cases as well as while loops. 'Tabber' function is used to print generated code with the right indent.
    Then the Epilog of the 'main' function is generated
    Finally the Nodes and the memory which is allocated for the tree is freed.

Some Conventions

    in the function "depth_checker()"
    To find the relative depth of the input string w.r.t to the previous level, the "depth_checker" function is used.
    It returns the following values with the following meaning
        0 - error input
        -1 - The input line is an ancestor w.r.t to the current depth
        1 - The input line is a sibling of the current depth
        2 - The input line is a child of the current depth

Key Points

    #define MAX : the value indicated the maximum size of the input line.
    memset function from string.h has been used to remove residual string while taking in input. This is necessary for 'depth_checker' function to find relative depth to make the tree.
    The function names is of the format "function_(func_number)". The reason is explained under the structure category in the readme in detail.
    Due to the following function names, special characters as well as space can be used.
    Please refer to the comments in the code where I have explained all crucial lines of the code. 